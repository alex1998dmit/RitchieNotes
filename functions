 const elements = {
  id: 0,
  name: 'Ввдение в ОС',
  children: [
      {
          id: 1,
          name: 'Ядро ОС',
          desc: 'Краткое введение',
          children: [
              {
                  id: 2,
                  name: 'Состав ядра',
                  desc: 'Как работает ядро',
                  children: [
                      {
                          id: 3,
                          name: 'Программный модуль',
                          desc: 'Некоторый текст по программному модулю',
                          children: [],
                      },
                      {
                          id: 4,
                          name: 'Физический модуль',
                          desc: 'Некоторое описание физического модуля',
                          children: [],
                      }
                  ]
              },
              {
                  id: 5,
                  name: 'Типы ядер',
                  desc: 'Расскажите об основных типах ядра',
                  children: [
                      {
                          id: 14,
                          name: 'Моноядро',
                          desc: 'Как работает ядро',
                          children: [],
                      },
                      {
                          id: 13,
                          name: 'Экзоядро',
                          desc: 'Как работает ядро',
                          children: [],
                      },
                      {
                          id: 12,
                          name: 'Миниядро',
                          desc: 'Как работает ядро',
                          children: [],
                      },
                  ],                  
              }
          ]
      },
      {
          id: 6,
          name: 'Виды ОС',
          desc: 'Ыввфывфывфывфыв',
          children: [
              {
                  id: 7,
                  name: 'Linux',
                  desc: 'Ыввфывфывфывфыв',
                  children: [
                      {
                          id: 7,
                          name: ' Gentoo',
                          desc: 'Ыввфывфывфывфыв',
                          children: [],
                      },
                      {
                          id: 7,
                          name: 'Ubuntu',
                          desc: 'Ыввфывфывфывфыв',
                          children: [],
                      },
                        {
                          type: 'empty',
                          children: [],
                        }
                  ],
              },
              {
                  id: 8,
                  name: 'Windows',
                  desc: 'dakjdklajlkjsakld',
                  children: [
                      {
                          id: 7,
                          name: 'Win10',
                          desc: 'Ыввфывфывфывфыв',
                          children: [],
                      },
                      {
                          id: 7,
                          name: 'Win Xp',
                          desc: 'Ыввфывфывфывфыв',
                          children: [],
                      },
                      {
                          id: 7,
                          name: 'Win 7',
                          desc: 'Ыввфывфывфывфыв',
                          children: [],
                      },
                  ],
              },
          ],
      },
      {
          type: 'empty',
          children: [],
      }
  ],
};

const findNodeById = (id) => {
    let finded;
    let isFinded = false;
    const iter = node => {
        const { children } = node;
        if (node.id === id) {
            finded = node;
        }      
        node.children.map((el) => iter(el));
    }
    iter(elements);
    return finded;
}

const removeEmptyElementsFromTree = tree => {
    let newObj = {};
  const iter = node => {
      let { children } = node;
      if (node.type === 'empty') {
          console.log(node);
          return false;
      }
      node.children = node.children.filter(el => iter(el));
      return node;
  }
  newObj = { ...iter(tree)};
  return newObj;
}

const countChildrenMaxElementsOnLevels = tree => {
  const iter = (n, currentDepth, acc) => {
    const { children } = n;
    acc[currentDepth + 1] = 0;
    acc[currentDepth + 1] = acc[currentDepth + 1] < children.length ? children.length : acc[currentDepth + 1];
    return children.reduce(
      (cAcc, nn) => iter(nn, currentDepth + 1, cAcc),
      acc
    );
  }
  return iter(tree, 0, [tree.children.length]);
}

const fromTreeToMatrix = tree => {
  const maxChildrenOnLevels = countChildrenMaxElementsOnLevels(tree);
  const iter = (n, currentDepth, acc) => {
    if (n && n.children.length < maxChildrenOnLevels[currentDepth + 1]) {

        const diff = maxChildrenOnLevels[currentDepth + 1] - n.children.length;
        for (let i = 0; i < diff;i++) {
            n.children = [null, ...n.children];
            // n.children.push(null);
        }
    }
    acc[currentDepth] = acc[currentDepth] ? acc[currentDepth] : [];
    acc[currentDepth] = [...acc[currentDepth], n];
    if (n === null) {
        return acc;
    }
    return n.children.reduce(
      (cAcc, nn) => iter(nn, currentDepth + 1, cAcc),
      acc
    )
  }
  return iter(tree, 0, []);
};
  
const fromTreeToArray = root => {
  const iter = (n, currentDepth, acc) => {
    const { children } = n; 
    let prevElements = acc[currentDepth];
    acc[currentDepth] = acc[currentDepth] ? 
      [...prevElements, { ...n, childrenAmounts: countMaxChildrenNodesOnLevel(n) }] : 
      [{ ...n, childrenAmounts: countMaxChildrenNodesOnLevel(n) }];
    if (!children || children.length === 0) {
      return acc;
    }
    return n.children.reduce(
      (cAcc, nn) => iter(nn, currentDepth + 1, cAcc),
      acc
    );
  };
  return iter(root, 0, {});
};
  
const fromObjectToMatrix = tree => {
  return Object.values(tree);
}

const generateMatrixFromTree = tree => fromObjectToMatrix(fromTreeToArray(elements));

const expentMatrixWithRowAndCols = matrix => {
  return matrix.map((row, rowIndex) => {
    return row.map((col, colIndex) => {
      return { ...col, selected: false, colIndex, rowIndex }
    });
  });
}

const removeNodeFromTree = (nodeId, tree) => {
  const iter = (node) => {
    const { children } = node; 
    if (node.id !== nodeId) {      
      return children.filter(n => iter(n));
    }
  }
  return { ...tree, children: iter(tree) };
};

  const updateNode = (nodeId, item, tree) => {
    let newObj = {};
    const iter = node => {
      if (node.id === nodeId) {
        return {
          ...node,
          ...item,
        };
      }
      node.children = node.children.map(el => iter(el));
      return node;
    };
    newObj = { ...iter(tree) };
    return newObj;
  };

const addChildNode = (nodeId, item, tree) => {
  let isFinded = false;
  if (nodeId === tree.id) {
    return { ...tree, children: [...tree.children, item]}
  }

  const iter = node => {
      const { children } = node;
      if (node.id === nodeId) {
          node.children = [...node.children, item];
          return node;
      }
      node.children = node.children.map((el) => iter(el));
      return node;
  }
  return iter(tree);
}

const findMaxId = tree => {
  const iter = (node, acc = 1) => {
    const { children } = node;
    if (!children) {
      return acc;
    }
    acc = node.id > acc ? node.id : acc;
    return children.reduce((cAcc, el) => iter(el, cAcc), acc)
  }
  return iter(tree);
}

// logick graph

const setStatusToChildNodes = (nodeId, status, tree) => {
    let isFinded = false;
    const iter = node => {
        const { children } = node;
        if (isFinded) {
            return node;
        }
        if (node.id === nodeId) {
            node.status = status;
            node.children = node.children.map(el => { return {... el, status } });
            isFinded = true;
            return node;
        }
        return children.map(el => iter(el));
    }
    return { ...tree, children: iter(tree) };
}

const fromTreeToMarkdown = tree => {
    const iter = (node, currentDepth, acc) => {
      const { children } = node;
      acc = `${acc} ${'#'.repeat(currentDepth)} ${node.name} ${node.desc ? '\n' + node.desc : ''} \n`;
      return children.reduce(
        (cAcc, nn) => iter(nn, currentDepth + 1, cAcc),
        acc
      );
    };
    return iter(tree, 1, '');
}


// let addedTree = addChildNode(1, { id: 12, name: 'Тестовое описание', desc: 'hello', children: []}, elements);

// console.log(addedTree.children[0]);

// console.log(removeNodeFromTree(1, elements))
// console.log(countChildrenMaxElementsOnLevels(elements));
// console.log(fromTreeToMatrix(elements));
// console.log(removeEmptyElementsFromTree(elements).children[0].children[0]);
console.log(findNodeById(3));